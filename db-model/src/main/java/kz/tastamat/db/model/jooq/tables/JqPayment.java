/*
 * This file is generated by jOOQ.
*/
package kz.tastamat.db.model.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import kz.tastamat.db.model.jooq.Indexes;
import kz.tastamat.db.model.jooq.JqPublic;
import kz.tastamat.db.model.jooq.Keys;
import kz.tastamat.db.model.jooq.tables.records.JqPaymentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JqPayment extends TableImpl<JqPaymentRecord> {

    private static final long serialVersionUID = 1316139076;

    /**
     * The reference instance of <code>public.tt_payment</code>
     */
    public static final JqPayment PAYMENT = new JqPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JqPaymentRecord> getRecordType() {
        return JqPaymentRecord.class;
    }

    /**
     * The column <code>public.tt_payment.id_</code>.
     */
    public final TableField<JqPaymentRecord, Long> ID = createField("id_", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tt_payment.create_date_</code>.
     */
    public final TableField<JqPaymentRecord, OffsetDateTime> CREATE_DATE = createField("create_date_", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.tt_payment.modify_date_</code>.
     */
    public final TableField<JqPaymentRecord, OffsetDateTime> MODIFY_DATE = createField("modify_date_", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.tt_payment.identificator_</code>.
     */
    public final TableField<JqPaymentRecord, String> IDENTIFICATOR = createField("identificator_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_payment.user_</code>.
     */
    public final TableField<JqPaymentRecord, Long> USER = createField("user_", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tt_payment.amount_</code>.
     */
    public final TableField<JqPaymentRecord, Long> AMOUNT = createField("amount_", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tt_payment.pid_</code>.
     */
    public final TableField<JqPaymentRecord, String> PID = createField("pid_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_payment.status_</code>.
     */
    public final TableField<JqPaymentRecord, String> STATUS = createField("status_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.tt_payment</code> table reference
     */
    public JqPayment() {
        this(DSL.name("tt_payment"), null);
    }

    /**
     * Create an aliased <code>public.tt_payment</code> table reference
     */
    public JqPayment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>public.tt_payment</code> table reference
     */
    public JqPayment(Name alias) {
        this(alias, PAYMENT);
    }

    private JqPayment(Name alias, Table<JqPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JqPayment(Name alias, Table<JqPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JqPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAYMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JqPaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JqPaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<JqPaymentRecord>>asList(Keys.PAYMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JqPaymentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JqPaymentRecord, ?>>asList(Keys.PAYMENT__FK_TT_PAYMENT_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JqPayment as(String alias) {
        return new JqPayment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JqPayment as(Name alias) {
        return new JqPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JqPayment rename(String name) {
        return new JqPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JqPayment rename(Name name) {
        return new JqPayment(name, null);
    }
}
