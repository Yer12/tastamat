/*
 * This file is generated by jOOQ.
*/
package kz.tastamat.db.model.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import kz.tastamat.db.model.jooq.Indexes;
import kz.tastamat.db.model.jooq.JqPublic;
import kz.tastamat.db.model.jooq.Keys;
import kz.tastamat.db.model.jooq.tables.records.JqOrderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JqOrder extends TableImpl<JqOrderRecord> {

    private static final long serialVersionUID = 631600457;

    /**
     * The reference instance of <code>public.tt_order</code>
     */
    public static final JqOrder ORDER = new JqOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JqOrderRecord> getRecordType() {
        return JqOrderRecord.class;
    }

    /**
     * The column <code>public.tt_order.id_</code>.
     */
    public final TableField<JqOrderRecord, Long> ID = createField("id_", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tt_order.create_date_</code>.
     */
    public final TableField<JqOrderRecord, OffsetDateTime> CREATE_DATE = createField("create_date_", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.tt_order.modify_date_</code>.
     */
    public final TableField<JqOrderRecord, OffsetDateTime> MODIFY_DATE = createField("modify_date_", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.tt_order.creator_</code>.
     */
    public final TableField<JqOrderRecord, Long> CREATOR = createField("creator_", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tt_order.identificator_</code>.
     */
    public final TableField<JqOrderRecord, String> IDENTIFICATOR = createField("identificator_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.recipient_name_</code>.
     */
    public final TableField<JqOrderRecord, String> RECIPIENT_NAME = createField("recipient_name_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.recipient_phone_</code>.
     */
    public final TableField<JqOrderRecord, String> RECIPIENT_PHONE = createField("recipient_phone_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.locker_id_</code>.
     */
    public final TableField<JqOrderRecord, Long> LOCKER_ID = createField("locker_id_", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tt_order.locker_code_</code>.
     */
    public final TableField<JqOrderRecord, String> LOCKER_CODE = createField("locker_code_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.box_size_</code>.
     */
    public final TableField<JqOrderRecord, String> BOX_SIZE = createField("box_size_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.drop_code_</code>.
     */
    public final TableField<JqOrderRecord, String> DROP_CODE = createField("drop_code_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.drop_date_</code>.
     */
    public final TableField<JqOrderRecord, OffsetDateTime> DROP_DATE = createField("drop_date_", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.tt_order.pick_code_</code>.
     */
    public final TableField<JqOrderRecord, String> PICK_CODE = createField("pick_code_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.pick_date_</code>.
     */
    public final TableField<JqOrderRecord, OffsetDateTime> PICK_DATE = createField("pick_date_", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.tt_order.status_</code>.
     */
    public final TableField<JqOrderRecord, String> STATUS = createField("status_", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tt_order.sms_</code>.
     */
    public final TableField<JqOrderRecord, Boolean> SMS = createField("sms_", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.tt_order</code> table reference
     */
    public JqOrder() {
        this(DSL.name("tt_order"), null);
    }

    /**
     * Create an aliased <code>public.tt_order</code> table reference
     */
    public JqOrder(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>public.tt_order</code> table reference
     */
    public JqOrder(Name alias) {
        this(alias, ORDER);
    }

    private JqOrder(Name alias, Table<JqOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private JqOrder(Name alias, Table<JqOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JqPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JqOrderRecord> getPrimaryKey() {
        return Keys.ORDER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JqOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<JqOrderRecord>>asList(Keys.ORDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JqOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JqOrderRecord, ?>>asList(Keys.ORDER__FK_TT_ORDER_CREATOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JqOrder as(String alias) {
        return new JqOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JqOrder as(Name alias) {
        return new JqOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JqOrder rename(String name) {
        return new JqOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JqOrder rename(Name name) {
        return new JqOrder(name, null);
    }
}
